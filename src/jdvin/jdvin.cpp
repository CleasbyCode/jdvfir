void startJdv(std::string& image_file_name, std::string& data_file_name, bool isRedditOption) {

	std::ifstream
		image_file_ifs(image_file_name, std::ios::binary),
		data_file_ifs(data_file_name, std::ios::binary);

	if (!image_file_ifs || !data_file_ifs) {
		std::cerr << "\nRead File Error: " << (!image_file_ifs ? "Unable to read image file" : "Unable to read data file") << ".\n\n";
		std::exit(EXIT_FAILURE);
	}
	image_file_ifs.seekg(0, image_file_ifs.end);
	data_file_ifs.seekg(0, data_file_ifs.end);

	size_t
		tmp_image_file_size = image_file_ifs.tellg(),
		tmp_data_file_size = data_file_ifs.tellg();

	image_file_ifs.seekg(0, image_file_ifs.beg);
	data_file_ifs.seekg(0, data_file_ifs.beg);

	constexpr uint_fast8_t MIN_FILE_SIZE = 134;

	constexpr uint_fast32_t
		MAX_FILE_SIZE = 209715200,
		MAX_FILE_SIZE_REDDIT = 20971520;

	if (tmp_image_file_size > MAX_FILE_SIZE || isRedditOption && tmp_image_file_size > MAX_FILE_SIZE_REDDIT || MIN_FILE_SIZE > tmp_image_file_size) {
		std::cerr << "\nImage File Error: " << (MIN_FILE_SIZE > tmp_image_file_size ? "Size of image is too small to be a valid PNG image"
			: "Size of image exceeds the maximum limit of " + (isRedditOption ? std::to_string(MAX_FILE_SIZE_REDDIT)
				: std::to_string(MAX_FILE_SIZE)) + " Bytes") << ".\n\n";

		std::exit(EXIT_FAILURE);
	}

	std::vector<uint_fast8_t>Image_Vec((std::istreambuf_iterator<char>(image_file_ifs)), std::istreambuf_iterator<char>());

	uint_fast32_t image_file_size = static_cast<uint_fast32_t>(Image_Vec.size());

	const std::string
		JPG_HEADER_SIG = "\xFF\xD8\xFF",
		JPG_END_SIG = "\xFF\xD9";

	const std::string
		IMAGE_START_SIG{ Image_Vec.begin(), Image_Vec.begin() + JPG_HEADER_SIG.length() },
		IMAGE_END_SIG{ Image_Vec.end() - JPG_END_SIG.length(), Image_Vec.end() };

	if (IMAGE_START_SIG != JPG_HEADER_SIG || IMAGE_END_SIG != JPG_END_SIG) {
		std::cerr << "\nImage File Error: This is not a valid JPG image.\n\n";
		std::exit(EXIT_FAILURE);
	}

	const std::string
		EXIF_SIG = "Exif\x00\x00II",
		EXIF_END_SIG = "xpacket end",
		ICC_PROFILE_SIG = "ICC_PROFILE";

		const uint_fast32_t ICC_PROFILE_POS = static_cast<uint_fast32_t>(std::search(Image_Vec.begin(), Image_Vec.end(), ICC_PROFILE_SIG.begin(), ICC_PROFILE_SIG.end()) - Image_Vec.begin());

	if (Image_Vec.size() > ICC_PROFILE_POS) {

		Image_Vec.erase(Image_Vec.begin(), Image_Vec.begin() + ICC_PROFILE_POS);
	}

	const uint_fast32_t EXIF_END_POS = static_cast<uint_fast32_t>(std::search(Image_Vec.begin(), Image_Vec.end(), EXIF_END_SIG.begin(), EXIF_END_SIG.end()) - Image_Vec.begin());
	if (Image_Vec.size() > EXIF_END_POS) {
		Image_Vec.erase(Image_Vec.begin(), Image_Vec.begin() + (EXIF_END_POS + 17));
	}

	const uint_fast32_t EXIF_START_POS = static_cast<uint_fast32_t>(std::search(Image_Vec.begin(), Image_Vec.end(), EXIF_SIG.begin(), EXIF_SIG.end()) - Image_Vec.begin());

	if (Image_Vec.size() > EXIF_START_POS) {
		const uint_fast16_t EXIF_BLOCK_SIZE = (static_cast<uint_fast16_t>(Image_Vec[EXIF_START_POS - 2]) << 8)
							| static_cast<uint_fast16_t>(Image_Vec[EXIF_START_POS - 1]);
			
		Image_Vec.erase(Image_Vec.begin(), Image_Vec.begin() + EXIF_BLOCK_SIZE - 2);
	}

		constexpr uint_fast8_t DQT_SIG[2] = {0xFF, 0xDB};
		const uint_fast16_t DQT_POS = static_cast<uint_fast16_t>(std::search(Image_Vec.begin(), Image_Vec.end(), &DQT_SIG[0], &DQT_SIG[2]) - Image_Vec.begin());
		
		Image_Vec.erase(Image_Vec.begin(), Image_Vec.begin() + DQT_POS);

		if (isRedditOption) {
			constexpr uint_fast8_t HEADER_BYTES[2]{ 0xFF, 0xD8 };
			Image_Vec.insert(Image_Vec.begin(), &HEADER_BYTES[0], &HEADER_BYTES[2]);
		}

		image_file_size = static_cast<uint_fast32_t>(Image_Vec.size());

		const uint_fast16_t LAST_SLASH_POS = static_cast<uint_fast16_t>(data_file_name.find_last_of("\\/"));

		if (LAST_SLASH_POS <= data_file_name.length()) {
			const std::string_view NO_SLASH_NAME(data_file_name.c_str() + (LAST_SLASH_POS + 1), data_file_name.length() - (LAST_SLASH_POS + 1));
			data_file_name = NO_SLASH_NAME;
		}

		constexpr uint_fast8_t MAX_FILENAME_LENGTH = 23;
		const uint_fast16_t FILE_NAME_LENGTH = static_cast<uint_fast16_t>(data_file_name.length());

		if (tmp_data_file_size > MAX_FILE_SIZE
			|| isRedditOption && tmp_data_file_size > MAX_FILE_SIZE_REDDIT
			|| FILE_NAME_LENGTH > tmp_data_file_size
			|| FILE_NAME_LENGTH > MAX_FILENAME_LENGTH) {
			std::cerr << "\nData File Error: " << (FILE_NAME_LENGTH > MAX_FILENAME_LENGTH ? "Length of file name is too long.\n\nFor compatibility requirements, length of file name must be under 24 characters"
				: (FILE_NAME_LENGTH > tmp_data_file_size ? "Size of file is too small.\n\nFor compatibility requirements, file size must be greater than the length of the file name"
					: "Size of file exceeds the maximum limit of " + (isRedditOption ? std::to_string(MAX_FILE_SIZE_REDDIT) 
						: std::to_string(MAX_FILE_SIZE)) + " Bytes")) << ".\n\n";
			std::exit(EXIT_FAILURE);
		}

		std::vector<uint_fast8_t>File_Vec((std::istreambuf_iterator<char>(data_file_ifs)), std::istreambuf_iterator<char>());

		std::reverse(File_Vec.begin(), File_Vec.end());
	
		deflateFile(File_Vec);

		uint_fast32_t data_file_size = static_cast<uint_fast32_t>(File_Vec.size());

		constexpr uint_fast8_t PROFILE_HEADER_LENGTH = 18;

		if (image_file_size + data_file_size + (data_file_size / 65535 * PROFILE_HEADER_LENGTH + PROFILE_HEADER_LENGTH) > (isRedditOption ? MAX_FILE_SIZE_REDDIT : MAX_FILE_SIZE)) {
			std::cerr << "\nImage File Error:\n\nThe combined size of the image file + data file exceeds the maximum limit for this program.\n\n";
			std::exit(EXIT_FAILURE);
		}
		std::vector<uint_fast8_t>Encrypted_Vec;

		std::vector<uint_fast8_t>Profile_Vec = {
					0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xE2, 0xFF, 0xFF,
					0x49, 0x43, 0x43, 0x5F, 0x50, 0x52, 0x4F, 0x46, 0x49, 0x4C, 0x45, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x04, 0x30,
					0x00, 0x00, 0x6D, 0x6E, 0x74, 0x72, 0x52, 0x47, 0x42, 0x20, 0x58, 0x59, 0x5A, 0x20, 0x07, 0xE0, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x61, 0x63, 0x73, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xF6, 0xD6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x2D, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x09, 0x64, 0x65, 0x73, 0x63, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x24, 0x72, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00,
					0x00, 0x14, 0x67, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0x28, 0x00, 0x00,	0x00, 0x14, 0x62, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0x3C, 0x00, 0x00,
					0x00, 0x14, 0x77, 0x74, 0x70, 0x74, 0x00, 0x00, 0x01, 0x50, 0x00, 0x00, 0x00, 0x14, 0x72, 0x54, 0x52, 0x43, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00,
					0x00, 0x28, 0x67, 0x54, 0x52, 0x43, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00, 0x00, 0x28, 0x62, 0x54, 0x52, 0x43, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00,
					0x00, 0x28, 0x63, 0x70, 0x72, 0x74, 0x00, 0x00, 0x01, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x75, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x65, 0x6E, 0x55, 0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x73, 0x00, 0x52, 0x00, 0x47,
					0x00, 0x42, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0xA2, 0x00, 0x00, 0x38, 0xF5, 0x00, 0x00, 0x03, 0x90, 0x58, 0x59,
					0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x99, 0x00, 0x00, 0xB7, 0x85, 0x00, 0x00, 0x18, 0xDA, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x24, 0xA0, 0x00, 0x00, 0x0F, 0x84, 0x00, 0x00,	0xB6, 0xCF, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0xF6, 0xD6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x2D, 0x70, 0x61, 0x72, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
					0x66, 0x66, 0x00, 0x00, 0xF2, 0xA7, 0x00, 0x00, 0x0D, 0x59, 0x00, 0x00,	0x13, 0xD0, 0x00, 0x00, 0x0A, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x04, 0x04, 0x07, 0x0A, 0x07, 0x07, 0x07, 0x0A, 0x0D, 0x0A,
					0x0A, 0x0A, 0x0A, 0x0D, 0x10, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x10, 0x14,	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
					0x14, 0x14, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0xFF,
					0xDB, 0x00, 0x43, 0x01, 0x05, 0x05, 0x05, 0x08, 0x07, 0x08, 0x0E, 0x07, 0x07, 0x0E, 0x20, 0x16, 0x12, 0x16, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
					0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
					0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xFF, 0xC2, 0x00, 0x11,
					0x08, 0x04, 0x00, 0x04, 0x00, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x1C, 0x00, 0x00, 0x01, 0x05, 0x01,
					0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x04, 0x05, 0x06, 0x03, 0x07, 0x08, 0xFF, 0xC4, 0x00,
					0x1A, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x02, 0x04, 0x05,
					0x06, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0xB4, 0x6A, 0x3E, 0xEA, 0x5E, 0x90 };

		encryptFile(Profile_Vec, File_Vec, Encrypted_Vec, data_file_name);

		File_Vec.clear();

		insertProfileHeaders(Profile_Vec, File_Vec, Image_Vec, data_file_size, isRedditOption);

		srand((unsigned)time(NULL));  // For output filename.

		const std::string TIME_VALUE = std::to_string(rand());

		data_file_name = "jrif_" + TIME_VALUE.substr(0, 5) + ".jpg";

		std::ofstream file_ofs(data_file_name, std::ios::binary);

		if (!file_ofs) {
			std::cerr << "\nWrite Error: Unable to write to file.\n\n";
			std::exit(EXIT_FAILURE);
		}

		file_ofs.write((char*)&Image_Vec[0], Image_Vec.size());

		const std::string SITES_LIST[6]{ "_Flickr", "_ImgPile", "_ImgBB", "_PostImage", "_Mastodon", "_Twitter" };

		const uint_fast32_t IMG_SIZE = static_cast<uint_fast32_t>(Image_Vec.size());

		constexpr uint_fast32_t
			TWITTER_SIZE = 9557, 		
			MASTODON_SIZE = 16777216,	
			REDDIT_SIZE = 20971520,		
			POST_IMG_SIZE = 25165824,	
			IMGBB_SIZE = 33554432,		
			IMG_PILE_SIZE = 104857600;	
		
		int_fast8_t compat_num = (File_Vec.size() <= TWITTER_SIZE ? 5 : (IMG_SIZE <= MASTODON_SIZE ? 4
			: (IMG_SIZE <= POST_IMG_SIZE ? 3 : (IMG_SIZE <= IMGBB_SIZE ? 2 : (IMG_SIZE <= IMG_PILE_SIZE ? 1
				: 0)))));

		std::cout << "\nSaved file-embedded JPG image: " + data_file_name + '\x20' + std::to_string(IMG_SIZE) + " Bytes.\n";

		if (isRedditOption && REDDIT_SIZE >= IMG_SIZE) {
			std::cout << "\n**Warning**\n\nDue to your option selection, for compatibility reasons\nyou should only post this file-embedded JPG image on Reddit.\n";
		}
		else {
			std::cout << "\nBased on image/data size, you can post your JPG file on the following sites:\n\n";
			while (compat_num >= 0) {
				std::cout << SITES_LIST[compat_num--] << '\n';
			}
		}

		std::cout << "\nComplete!\n\n";
	}
